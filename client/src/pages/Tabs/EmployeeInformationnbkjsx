// import React, { useEffect, useState } from 'react';
// import { useForm, Controller } from 'react-hook-form';
// import { yupResolver } from '@hookform/resolvers/yup';
// import * as yup from 'yup';
// import axios from 'axios';
// import NationalitySelect from './NationalitySelect';

// // Define validation schema with Yup
// const schema = yup.object().shape({
//   user_id: yup.string().required('User ID is required'),
//   full_name: yup.string().required('Full Name is required'),
//   gender: yup.string().required('Gender is required'),
//   date_of_birth: yup.date().required('Date of Birth is required'),
//   nationality: yup.object().nullable().required('Nationality is required'),
//   identity_number: yup.string().required('Identity Number is required'),
//   address: yup.string().required('Address is required'),
//   phone_number: yup.string().required('Phone Number is required'),
//   email: yup.string().email('Invalid email').required('Email is required'),
// });

// const EmployeeInformation = () => {
//   const [nationalities, setNationalities] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const { control, handleSubmit, formState: { errors } } = useForm({
//     resolver: yupResolver(schema),
//   });

//   useEffect(() => {
//     const fetchNationalities = async () => {
//       const token = localStorage.getItem('token');
//       try {
//         const response = await axios.get(`http://127.0.0.1:8000/api/countries`, {
//           headers: {
//             Authorization: `Bearer ${token}`,
//           },
//         });
//         setNationalities(response.data);
//       } catch (error) {
//         console.error(error);
//       } finally {
//         setLoading(false);
//       }
//     };

//     fetchNationalities();
//   }, []);

//   const onSubmit = (data) => {
//     console.log(data);
//     // Handle form submission logic here
//   };

//   return (
//     <section className="bg-gray-50 dark:bg-gray-900">
//       <div className="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
//         <div className="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-6xl xl:p-0 dark:bg-gray-800 dark:border-gray-700">
//           <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
//             <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
//               Employee Information
//             </h1>
//             <form className="grid grid-cols-1 md:grid-cols-3 gap-4" onSubmit={handleSubmit(onSubmit)}>
              // <div>
              //   <label htmlFor="user_id" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">User ID</label>
              //   <input type="text" {...control.register("user_id")} id="user_id" className={`bg-gray-50 border ${errors.user_id ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="User ID" />
              //   {errors.user_id && <p className="text-red-500 text-sm">{errors.user_id.message}</p>}
              // </div>
              // <div>
              //   <label htmlFor="full_name" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Full Name</label>
              //   <input type="text" {...control.register("full_name")} id="full_name" className={`bg-gray-50 border ${errors.full_name ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="Full Name" />
              //   {errors.full_name && <p className="text-red-500 text-sm">{errors.full_name.message}</p>}
              // </div>
              // <div>
              //   <label htmlFor="gender" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Gender</label>
              //   <select {...control.register("gender")} id="gender" className={`bg-gray-50 border ${errors.gender ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`}>
              //     <option value="" disabled>Select Gender</option>
              //     <option value="male">Male</option>
              //     <option value="female">Female</option>
              //   </select>
              //   {errors.gender && <p className="text-red-500 text-sm">{errors.gender.message}</p>}
              // </div>
              // <div>
              //   <label htmlFor="date_of_birth" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Date of Birth</label>
              //   <input type="date" {...control.register("date_of_birth")} id="date_of_birth" className={`bg-gray-50 border ${errors.date_of_birth ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} />
              //   {errors.date_of_birth && <p className="text-red-500 text-sm">{errors.date_of_birth.message}</p>}
              // </div>
              // <div>
              //   <label htmlFor="nationality" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Nationality</label>
              //   <NationalitySelect
              //     name="nationality"
              //     control={control}
              //     nationalities={nationalities}
              //     loading={loading}
              //     errors={errors} // Pass errors to the component
              //   />
              // </div>
              // <div>
              //   <label htmlFor="identity_number" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Identity Number</label>
              //   <input type="text" {...control.register("identity_number")} id="identity_number" className={`bg-gray-50 border ${errors.identity_number ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="Identity Number" />
              //   {errors.identity_number && <p className="text-red-500 text-sm">{errors.identity_number.message}</p>}
              // </div>
              // <div>
              //   <label htmlFor="address" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Address</label>
              //   <input type="text" {...control.register("address")} id="address" className={`bg-gray-50 border ${errors.address ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="Address" />
              //   {errors.address && <p className="text-red-500 text-sm">{errors.address.message}</p>}
              // </div>
              // <div>
              //   <label htmlFor="phone_number" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Phone Number</label>
              //   <input type="tel" {...control.register("phone_number")} id="phone_number" className={`bg-gray-50 border ${errors.phone_number ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="Phone Number" />
              //   {errors.phone_number && <p className="text-red-500 text-sm">{errors.phone_number.message}</p>}
              // </div>
              // <div>
              //   <label htmlFor="email" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
              //   <input type="email" {...control.register("email")} id="email" className={`bg-gray-50 border ${errors.email ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="name@company.com" />
              //   {errors.email && <p className="text-red-500 text-sm">{errors.email.message}</p>}
              // </div>
//               <div className="col-span-3">
//                 <button type="submit" className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-600">Submit</button>
//               </div>
//             </form>
//           </div>
//         </div>
//       </div>
//     </section>
//   );
// };

// export default EmployeeInformation;


import React, { useEffect, useState } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import axios from 'axios';
import NationalitySelect from './NationalitySelect';

// Define validation schema with Yup
const schema = yup.object().shape({
  user_id: yup.string().required('User ID is required'),
  full_name: yup.string().required('Full Name is required'),
  // gender: yup.string().required('Gender is required'),
  // date_of_birth: yup.date().required('Date of Birth is required'),
  // nationality: yup.object().nullable().required('Nationality is required'),
  // identity_number: yup.string().required('Identity Number is required'),
  // address: yup.string().required('Address is required'),
  // phone_number: yup.string().required('Phone Number is required'),
  // email: yup.string().email('Invalid email').required('Email is required'),
});

const EmployeeInformation = ({ onSubmit }) => {
  const [nationalities, setNationalities] = useState([]);
  const [loading, setLoading] = useState(true);
  const { control, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(schema),
  });

  useEffect(() => {
    const fetchNationalities = async () => {
      const token = localStorage.getItem('token');
      try {
        const response = await axios.get(`http://127.0.0.1:8000/api/countries`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setNationalities(response.data);
      } catch (error) {
        console.error(error);
      } finally {
        setLoading(false);
      }
    };

    fetchNationalities();
  }, []);

  return (
    <section className="bg-gray-50 dark:bg-gray-900">
      <div className="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
        <div className="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-6xl xl:p-0 dark:bg-gray-800 dark:border-gray-700">
          <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
            <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
              Employee Information
            </h1>
            <form className="grid grid-cols-1 md:grid-cols-3 gap-4" onSubmit={handleSubmit(onSubmit)}>
            <div>
                <label htmlFor="user_id" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">User ID</label>
                <input type="text" {...control.register("user_id")} id="user_id" className={`bg-gray-50 border ${errors.user_id ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="User ID" />
                {errors.user_id && <p className="text-red-500 text-sm">{errors.user_id.message}</p>}
              </div>
              {/* <div>
                <label htmlFor="full_name" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Full Name</label>
                <input type="text" {...control.register("full_name")} id="full_name" className={`bg-gray-50 border ${errors.full_name ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="Full Name" />
                {errors.full_name && <p className="text-red-500 text-sm">{errors.full_name.message}</p>}
              </div>
              <div>
                <label htmlFor="gender" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Gender</label>
                <select {...control.register("gender")} id="gender" className={`bg-gray-50 border ${errors.gender ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`}>
                  <option value="" disabled>Select Gender</option>
                  <option value="male">Male</option>
                  <option value="female">Female</option>
                </select>
                {errors.gender && <p className="text-red-500 text-sm">{errors.gender.message}</p>}
              </div>
              <div>
                <label htmlFor="date_of_birth" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Date of Birth</label>
                <input type="date" {...control.register("date_of_birth")} id="date_of_birth" className={`bg-gray-50 border ${errors.date_of_birth ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} />
                {errors.date_of_birth && <p className="text-red-500 text-sm">{errors.date_of_birth.message}</p>}
              </div>
              <div>
                <label htmlFor="nationality" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Nationality</label>
                <NationalitySelect
                  name="nationality"
                  control={control}
                  nationalities={nationalities}
                  loading={loading}
                  errors={errors} // Pass errors to the component
                />
              </div>
              <div>
                <label htmlFor="identity_number" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Identity Number</label>
                <input type="text" {...control.register("identity_number")} id="identity_number" className={`bg-gray-50 border ${errors.identity_number ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="Identity Number" />
                {errors.identity_number && <p className="text-red-500 text-sm">{errors.identity_number.message}</p>}
              </div>
              <div>
                <label htmlFor="address" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Address</label>
                <input type="text" {...control.register("address")} id="address" className={`bg-gray-50 border ${errors.address ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="Address" />
                {errors.address && <p className="text-red-500 text-sm">{errors.address.message}</p>}
              </div>
              <div>
                <label htmlFor="phone_number" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Phone Number</label>
                <input type="tel" {...control.register("phone_number")} id="phone_number" className={`bg-gray-50 border ${errors.phone_number ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="Phone Number" />
                {errors.phone_number && <p className="text-red-500 text-sm">{errors.phone_number.message}</p>}
              </div>
              <div>
                <label htmlFor="email" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
                <input type="email" {...control.register("email")} id="email" className={`bg-gray-50 border ${errors.email ? 'border-red-500' : 'border-gray-300'} text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white`} placeholder="name@company.com" />
                {errors.email && <p className="text-red-500 text-sm">{errors.email.message}</p>}
              </div>
               */}
              <div className="col-span-3">
                <button type="submit" className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-600">Submit</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </section>
  );
};

export default EmployeeInformation;

